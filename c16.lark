?start: program

program: (declaration | function | typedef | struct_def | statement)*


base_type: INT_TYPE
         | VOID_TYPE
         | STRUCT NAME

?type: base_type STAR*

typedef: TYPEDEF type NAME ";"

struct_def: STRUCT NAME field_block ";"

field_block: "{" declaration* "}"


declaration: type declarator ("=" initializer)? ";"

inline_declaration: type declarator ("=" initializer)?

declarator: NAME (LBRACK NUMBER RBRACK)?

initializer: expression
           | "{" expression ("," expression)* "}"


function: type NAME LPAR [parameter (COMMA parameter)*] RPAR block

parameter: type [declarator]


statement: block
         | var_declaration ";"
         | if_stmt
         | while_stmt
         | for_stmt
         | switch_stmt
         | break_stmt
         | continue_stmt
         | return_stmt ";"
         | expr_stmt ";"

block: "{" statement* "}"

var_declaration: type declarator ("=" initializer)?

assignment: lvalue EQUAL expression

lvalue: var
      | array_access
      | deref
      | member_access
      | ptr_access

var: NAME

array_access: NAME LBRACK expression RBRACK

deref: STAR lvalue

member_access: lvalue DOT NAME

ptr_access: lvalue ARROW NAME

if_stmt: "if" "(" expression ")" statement ["else" statement]

while_stmt: "while" "(" expression ")" statement

for_stmt : FOR LPAR for_control RPAR statement

for_control: inline_declaration? SEMICOLON expression? SEMICOLON expression_list?

expression_list: expression (COMMA expression)*


break_stmt: BREAK SEMICOLON

continue_stmt: CONTINUE SEMICOLON

switch_stmt: SWITCH "(" expression ")" "{" case_clause* [default_clause] "}"

case_clause: "case" expression ":" statement*

default_clause: "default" ":" statement*

return_stmt: "return" [expression]

expr_stmt: expression?


?expression: assignment_expr

?assignment_expr: logic_or
                | lvalue "=" assignment_expr -> assign

?logic_or: logic_and
         | logic_or OR logic_and       -> or

?logic_and: equality
          | logic_and AND equality      -> and

?equality: relational
         | equality EQ relational      -> eq
         | equality NE relational      -> ne

?relational: additive
           | relational LT additive     -> lt
           | relational LE additive     -> le
           | relational GT additive     -> gt
           | relational GE additive     -> ge

?additive: multiplicative
         | additive PLUS multiplicative   -> add
         | additive MINUS multiplicative  -> sub

?multiplicative: multiplicative STAR unary   -> mul
               | multiplicative SLASH unary  -> div
               | unary

?unary: UNARY_OPERATOR unary
      | postfix

?postfix: primary
        | postfix LBRACK expression RBRACK   -> array_access
        | postfix DOT NAME                    -> member_access
        | postfix ARROW NAME                  -> ptr_access
        | postfix "(" [expression ("," expression)*] ")" -> func_call

?primary: NUMBER                           -> number
        | NAME                             -> var
        | "(" expression ")"

UNARY_OPERATOR: MINUS | PLUS | NOT | STAR | AMP

%import common.CNAME -> NAME
%import common.SIGNED_NUMBER -> NUMBER
%import common.WS_INLINE
%import common.NEWLINE

%ignore WS_INLINE
%ignore NEWLINE

// Keywords
INT_TYPE: "int"
VOID_TYPE: "void"
TYPEDEF: "typedef"
STRUCT: "struct"

// Operators and punctuation
STAR: "*"
AMP: "&"
LBRACK: "["
RBRACK: "]"
LPAR: "("
RPAR: ")"
ARROW: "->"

PLUS: "+"
MINUS: "-"
SLASH: "/"
EQ: "=="
NE: "!="
LT: "<"
LE: "<="
GT: ">"
GE: ">="
AND: "&&"
OR: "||"
NOT: "!"

EQUAL: "="
SEMICOLON: ";"
COMMA: ","
DOT: "."

FOR: "for"
SWITCH: "switch"
BREAK: "break"
CONTINUE: "continue"